(window.webpackJsonp=window.webpackJsonp||[]).push([[18,11,13],{231:function(t,e,n){var content=n(233);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[t.i,content,""]]),content.locals&&(t.exports=content.locals);(0,n(36).default)("d6c4912c",content,!0,{sourceMap:!1})},232:function(t,e,n){"use strict";n(231)},233:function(t,e,n){var r=n(35)(!1);r.push([t.i,"nav[data-v-2f9f7af1]{background-color:var(--assetColor);transition:all .35s ease;position:relative}nav .bc[data-v-2f9f7af1]{padding-left:6px;padding-right:6px}nav .bc .nav-item[data-v-2f9f7af1]{border-radius:0;color:var(--mainColor);font-weight:500;padding:1px;margin:.35rem .73rem;border-bottom:2px solid transparent}nav .bc .nav-item[data-v-2f9f7af1]:hover{border-bottom-color:inherit}nav .bc .nav-item[data-v-2f9f7af1]:focus{box-shadow:0 0 0 .2rem #fdfdfd}nav .bc .nav-item.skip[data-v-2f9f7af1]{background-color:var(--mainBkgColor);position:absolute;top:8px;left:-320px}nav .bc .nav-item.skip[data-v-2f9f7af1]:focus{box-shadow:0 0 0 .2rem violet;left:30px}@media screen and (max-width:500px){nav .bc .nav-item[data-v-2f9f7af1]{margin:.15rem!important}}",""]),t.exports=r},234:function(t,e,n){"use strict";n.r(e);var r={mounted:function(){document.addEventListener("scroll",(function(){var t=document.querySelector("nav"),e=t.previousElementSibling;e&&(window.scrollY>e.offsetHeight+t.offsetHeight?t.classList.add("fixed-navbar"):t.classList.remove("fixed-navbar"))}))}},o=(n(232),n(7)),component=Object(o.a)(r,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("nav",[n("div",{staticClass:"bc py-2"},[n("a",{staticClass:"skip nav-item btn px-1",attrs:{href:"#main-content"}},[t._v("Skip to content")]),t._v(" "),n("nuxt-link",{staticClass:"nav-item btn",attrs:{to:{path:"/"}}},[t._v("Home "),n("span",{staticClass:"sr-only"},[t._v("page")])]),t._v(" "),n("nuxt-link",{staticClass:"nav-item btn",attrs:{to:{path:"/projects"}}},[t._v("Projects "),n("span",{staticClass:"sr-only"},[t._v("page")])]),t._v(" "),n("nuxt-link",{staticClass:"nav-item btn",attrs:{to:{path:"/blog"}}},[t._v("Blog "),n("span",{staticClass:"sr-only"},[t._v("page")])]),t._v(" "),n("nuxt-link",{staticClass:"nav-item btn",attrs:{to:{path:"/resources"}}},[t._v("Resources "),n("span",{staticClass:"sr-only"},[t._v("page")])])],1)])}),[],!1,null,"2f9f7af1",null);e.default=component.exports},241:function(t,e,n){"use strict";n.r(e);var r=n(256),o=n.n(r),l=(n(257),{name:"prism",props:{lang:{type:String,default:"js"}},mounted:function(){o.a.highlightAll()}}),c=n(7),component=Object(c.a)(l,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"prism"},[n("pre",{staticClass:"line-numbers",class:"language-"+t.lang},[t._v("\t\t\t"),n("code",[t._t("default")],2),t._v("\n\t")])])}),[],!1,null,null,null);e.default=component.exports},272:function(t,e,n){var content=n(293);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[t.i,content,""]]),content.locals&&(t.exports=content.locals);(0,n(36).default)("42c51df1",content,!0,{sourceMap:!1})},292:function(t,e,n){"use strict";n(272)},293:function(t,e,n){var r=n(35)(!1);r.push([t.i,".blog header[data-v-6eaf2d24]{min-height:10rem;text-align:center}.blog header strong[data-v-6eaf2d24]{text-align:left;display:inline-block;font-size:.9rem}.blog main[data-v-6eaf2d24]{background-color:#fafafa}",""]),t.exports=r},302:function(t,e,n){"use strict";n.r(e);var r={components:{Prism:n(241).default},head:function(){return{title:"Express App generator | Abubaker Yahia"}}},o=(n(292),n(7)),component=Object(o.a)(r,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"blog"},[n("Navbar"),t._v(" "),n("main",{attrs:{id:"main-content"}},[n("div",{staticClass:"bc overlay"},[n("h1",{staticClass:"py-5"},[t._v("Express app generator with tests")]),t._v(" "),n("p",{staticClass:"lead"},[t._v("Express is a minimalist and unopinionated framework, so unlike other strongly opinionated frameworks the code organization and structure can vary between developers. and this makes a debate about which way is best?")]),t._v(" "),t._m(0),t._v(" "),n("p",{staticClass:"lead"},[t._v("In a series, I will discuss these structures from the simplest to the more advanced ones.")]),t._v(" "),n("p",{staticClass:"lead"},[t._v("So, let's kick things off with the most common one")]),t._v(" "),n("h2",[t._v("index.js")]),t._v(" "),n("p",{staticClass:"lead"},[t._v("The app main entry, should be as  simple as possible")]),t._v(" "),n("Prism",[t._v("\n//index.js\n\nconst app = require('express')()\nconst winston = require('winston')\n\n//error handling and logging\nrequire('./app/logging')()\n\n//control all the routes\nrequire('./app/router')(app)\n\n//server\nconst PORT = process.env.PORT\n\t\t\t|| process.env.NODE_ENV == 'test' ? 30001 : 3000\n\nconst server = app.listen(PORT, () => {\n\twinston.verbose(`App listening on port ${PORT}!`)\n})\n\nmodule.exports = server\n")]),t._v(" "),n("h2",{staticClass:"pt-3"},[t._v("App/logging.js")]),t._v(" "),n("p",{staticClass:"lead"},[t._v("logging and logging and error handling")]),t._v(" "),n("Prism",[t._v("\n//app/logging.js\n\nconst winston = require(\"winston\")\n\nmodule.exports = () => {\n\n\t/*\n\t*\tCreate two winston transports to\n\t* \t1) log serious errors in a log file\n\t*\t2) colored message in console for less serious errors\n\t*/\n\twinston.add(new winston.transports.File({\n\t\tlevel: 'error',\n\t\tfilename: 'logger.log',\n\t\thandleExceptions: true,\n\t\thandleRejections: true\n\t}))\n\twinston.add(new winston.transports.Console({\n\t\tformat: winston.format.combine(\n\t\t\twinston.format.colorize({ all: true }),\n\t\t\twinston.format.simple()\n\t\t),\n\t\tlevel: 'silly',\n\t\thandleExceptions: true,\n\t\thandleRejections: true\n\t}))\n\n\n\t//catches uncaught Exception\n\tprocess.on(\"uncaughtException\", ex => {\n\t\twinston.error(ex.message, ex)\n\t\tsetTimeout(() => process.exit(1), 1000)\n\t})\n\n\t//catches unhandled Rejection\n\tprocess.on(\"unhandledRejection\", rej => { throw rej })\n}\n")]),t._v(" "),n("h2",{staticClass:"pt-3"},[t._v("App/router.js")]),t._v(" "),t._m(1),t._v(" "),n("prism",[t._v("\n//app/router.js\n\nconst express = require('express')\nrequire('express-async-errors')\nconst { error } = require('../middlewares')\nconst users = require('../routes/users')\n\nmodule.exports = (app) => {\n\n\tapp.use(express.urlencoded({ extended: true }))\n\tapp.use(express.json())\n\n\tapp.use('/api/users', users)\n\t// ...routes\n\tapp.use(error)\n\t/**\n\t*  app.user(error)\n\t*\t'express-async-errors' package empower you to use async/await\n\t*\twithout wrapping it in a try catch block,\n\t* \tit will pass the error as middleware, and handle it once in the end of your routes\n\t*/\n}\n")]),t._v(" "),n("h2",{staticClass:"pt-3"},[t._v("Routes")]),t._v(" "),n("p",{staticClass:"lead"},[t._v("routes for every main entary in the router")]),t._v(" "),n("p",{staticClass:"lead"},[t._v("The route 'api/users' in App/router.js file will have users.js in Routes")]),t._v(" "),n("prism",[t._v("\n//routes/users.js\n\nconst route = require('express').Router()\nconst UserController = require('../controllers/users')\nconst { RequestValidator, auth, admin } = require('../middlewares')\nconst validate = RequestValidator.users\n\n/*\n* Separate the validation fro the controller and use it as middleware\n*/\n\n// Puplic Routes\nroute.post('/login', validate.login, UserController.login)\nroute.post('/', validate.create, UserController.create)\n\n\n// Protected Routes\n// route.all('*', auth) //enable this line will make auth required in all routes\nroute.get('/', UserController.all)\nroute.get('/me', auth ,UserController.me)\nroute.get('/dashboard', [auth, admin], UserController.dashboard)\nroute.get('/:id', validate.id, UserController.byId)\nroute.put('/:id', validate.update, UserController.update)\nroute.delete('/:id', validate.id, UserController.delete)\n\nmodule.exports = route\n")]),t._v(" "),n("h2",{staticClass:"pt-3"},[t._v("Controllers")]),t._v(" "),n("p",{staticClass:"lead"},[t._v("the business logic")]),t._v(" "),n("prism",[t._v("\n//controller/users.js\n\nmodule.exports =  {\n\n    async all(req, res) {\n\t\t// ...\n    },\n\n\n    async byId(req, res) {\n\t\t//...\n\t},\n\n\t// ...\n\n}\n")]),t._v(" "),n("h2",[t._v("Middlewares")]),t._v(" "),n("p",{staticClass:"lead"},[t._v("@files: validation, auth, ...ect")]),t._v(" "),n("prism",[t._v("\n//middlewares/index.js\n\nconst RequestValidator = require('./validation')\n\nmodule.exports =  {\n\n    error(err, req, res, next) {\n\t\t// ...\n    },\n\n\n    admin(req, res, next) {\n\t\t//...\n\t},\n\n\tauth(req, res, next) {\n\t\t//...\n\t},\n\n\tRequestValidator\n}\n")]),t._v("\nthe Request Validator middleware for users\n"),n("prism",[t._v("\n//middlewares/validation/users.js\n\nconst Joi = require('joi')\n\nmodule.exports = {\n\n\tid(req, res, next) {\n\n\t\t// ...\n\n\t\tnext()\n\t},\n\n\n\tcreate(req, res, next) {\n\n\t\t//...\n\n\t\tnext()\n\t},\n\n\tupdate(req, res, next) {\n\n\t\t//...\n\n\t\tnext()\n\t},\n\n\t//...\n\n}\n")]),t._v(" "),n("h2",[t._v("Modles")]),t._v(" "),n("p",[t._v("the shape of the DB tables")]),t._v(" "),n("h2",[t._v("Config")]),t._v(" "),n("p",{staticClass:"lead"},[t._v("the app configrations")]),t._v(" "),n("h2",[t._v("Tests")]),t._v(" "),n("prism",[t._v("\n//tests/users.test.js\n\nconst request = require('supertest')\nconst { User } = require('../models')\nlet server\n\ndescribe('Users', () => {\n\n\tbeforeEach(() => { server = require('../index') })\n\t//clear DB afterEach because each test should be isolated from other tests\n\tafterEach( async () => {\n\t\tawait User.destroy({ where: {} })\n\t\tserver.close()\n\t})\n\n\tdescribe('POST /api/users', () => {\n\n\t\tit('create new user', async () => {\n\t\t\t//...\n\t\t})\n\n\t\tit('shouldn\\'t create new user, email already used', async () => {\n\t\t\t//...\n\t\t})\n\n\t\tit('shouldn\\'t create new user, missing fields', async () => {\n\t\t\t//...\n\t\t})\n\t})\n\n\t// ...\n\n})\n")]),t._v(" "),n("a",{staticClass:"btn btn-secondary px-5 py-3",attrs:{href:"https://github.com/BekYahia/express-app-generator",target:"_blank",rel:"noopener noreferrer"}},[t._v("Github repo")])],1)])],1)}),[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",{staticClass:"lead"},[t._v("Well, like anything in tech, there is no only one right way to do it, but the main idea is "),n("span",{staticClass:"highlight"},[t._v("the separation of concerns, dividing your app into layers and each one has its own role.")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",{staticClass:"lead"},[t._v("control router "),n("strong",[t._v("main")]),t._v(" entries")])}],!1,null,"6eaf2d24",null);e.default=component.exports;installComponents(component,{Navbar:n(234).default,Prism:n(241).default,Prism:n(241).default})}}]);